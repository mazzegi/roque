// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/roque.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoqueClient is the client API for Roque service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoqueClient interface {
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*Void, error)
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*Void, error)
}

type roqueClient struct {
	cc grpc.ClientConnInterface
}

func NewRoqueClient(cc grpc.ClientConnInterface) RoqueClient {
	return &roqueClient{cc}
}

func (c *roqueClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/proto.Roque/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roqueClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := c.cc.Invoke(ctx, "/proto.Roque/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roqueClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/proto.Roque/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoqueServer is the server API for Roque service.
// All implementations must embed UnimplementedRoqueServer
// for forward compatibility
type RoqueServer interface {
	Write(context.Context, *WriteRequest) (*Void, error)
	Read(context.Context, *ReadRequest) (*ReadResponse, error)
	Commit(context.Context, *CommitRequest) (*Void, error)
	mustEmbedUnimplementedRoqueServer()
}

// UnimplementedRoqueServer must be embedded to have forward compatible implementations.
type UnimplementedRoqueServer struct {
}

func (UnimplementedRoqueServer) Write(context.Context, *WriteRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedRoqueServer) Read(context.Context, *ReadRequest) (*ReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedRoqueServer) Commit(context.Context, *CommitRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedRoqueServer) mustEmbedUnimplementedRoqueServer() {}

// UnsafeRoqueServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoqueServer will
// result in compilation errors.
type UnsafeRoqueServer interface {
	mustEmbedUnimplementedRoqueServer()
}

func RegisterRoqueServer(s grpc.ServiceRegistrar, srv RoqueServer) {
	s.RegisterService(&Roque_ServiceDesc, srv)
}

func _Roque_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoqueServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Roque/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoqueServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Roque_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoqueServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Roque/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoqueServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Roque_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoqueServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Roque/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoqueServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Roque_ServiceDesc is the grpc.ServiceDesc for Roque service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Roque_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Roque",
	HandlerType: (*RoqueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Write",
			Handler:    _Roque_Write_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Roque_Read_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _Roque_Commit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/roque.proto",
}
